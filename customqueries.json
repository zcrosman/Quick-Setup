{
    "queries": [
		{
            "name": "List all owned users (limit 50)",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (m:User) WHERE m.owned=TRUE RETURN m LIMIT 50"
                }
            ]
        },
		{
            "name": "List all owned computers",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (m:Computer) WHERE m.owned=TRUE RETURN m"
                }
            ]
        },
			{
            "name": "List all owned groups",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (m:Group) WHERE m.owned=TRUE RETURN m"
                }
            ]
        },
			{
            "name": "List all High Valued Targets",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (m) WHERE m.highvalue=TRUE RETURN m"
                }
            ]
        },
			{
            "name": "List the groups of all owned users",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (m:User) WHERE m.owned=TRUE WITH m MATCH p=(m)-[:MemberOf*1..]->(n:Group) RETURN p"
                }
            ]
        },
			{
            "name": "Find the Shortest path to a high value target from an owned object",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=shortestPath((g {owned:true})-[*1..]->(n {highvalue:true})) WHERE  g<>n return p"
                }
            ]
        },
			{
            "name": "Find the Shortest path to a unconstrained delegation system from an owned object",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (n) MATCH p=shortestPath((n)-[*1..]->(m:Computer {unconstraineddelegation: true})) WHERE NOT n=m AND n.owned = true RETURN p"
                }
            ]
        },
        {

            "name": "Find all Kerberoastable Users",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (n:User)WHERE n.hasspn=true RETURN n",
                    "allowCollapse": false
                }
            ]
        },
		{
            "name": "Find All Users with an SPN/Find all Kerberoastable Users with passwords last set less than 5 years ago",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (u:User) WHERE u.hasspn=true AND u.pwdlastset < (datetime().epochseconds - (1825 * 86400)) AND NOT u.pwdlastset IN [-1.0, 0.0] RETURN u.name, u.pwdlastset order by u.pwdlastset "
                }
            ]
        },
		{
            "name": "Find Kerberoastable Users with a path to DA",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (u:User {hasspn:true}) MATCH (g:Group) WHERE g.objectid ENDS WITH '-512' MATCH p = shortestPath( (u)-[*1..]->(g) ) RETURN p"
                }
            ]
        },
        {
            "name": "Find machines Domain Users can RDP into",
            "queryList": [
                {
                    "final": true,
                    "query": "match p=(g:Group)-[:CanRDP]->(c:Computer) where g.objectid ENDS WITH '-513' return p"
                }
            ]
        },
        {
            "name": "Find what groups can RDP",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=(m:Group)-[r:CanRDP]->(n:Computer) RETURN p"
                }
            ]
        },		
        {
            "name": "Find groups that can reset passwords (Warning: Heavy)",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=(m:Group)-[r:ForceChangePassword]->(n:User) RETURN p"
                }
            ]
        },
        {
            "name": "Find groups that have local admin rights (Warning: Heavy)",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=(m:Group)-[r:AdminTo]->(n:Computer) RETURN p"
                }
            ]
        },
        {
            "name": "Find all users that have local admin rights",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=(m:User)-[r:AdminTo]->(n:Computer) RETURN p"
                }
            ]
        },
        {
            "name": "Find all active Domain Admin sessions",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (n:User)-[:MemberOf]->(g:Group) WHERE g.objectid ENDS WITH '-512' MATCH p = (c:Computer)-[:HasSession]->(n) return p"
                }
            ]
        },
		{
            "name": "Find all computers with Unconstrained Delegation",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (c:Computer {unconstraineddelegation:true}) return c"
                }
            ]
        },
		{
            "name": "Find all computers with unsupported operating systems",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (H:Computer) WHERE H.operatingsystem = '.*(2000|2003|2008|xp|vista|7|me).*' RETURN H"
                }
            ]
        },
		{
            "name": "Find users that logged in within the last 90 days",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (u:User) WHERE u.lastlogon < (datetime().epochseconds - (90 * 86400)) and NOT u.lastlogon IN [-1.0, 0.0] RETURN u"
                }
            ]
        },
		{
            "name": "Find users with passwords last set within the last 90 days",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (u:User) WHERE u.pwdlastset < (datetime().epochseconds - (90 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] RETURN u"
                }
            ]
        },		
		{
            "name": "Find constrained delegation",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=(u:User)-[:AllowedToDelegate]->(c:Computer) RETURN p"
                }
            ]
        },	
		{
            "name": "Find computers that allow unconstrained delegation that ARENâ€™T domain controllers.",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (c1:Computer)-[:MemberOf*1..]->(g:Group) WHERE g.objectid ENDS WITH '-516' WITH COLLECT(c1.name) AS domainControllers MATCH (c2:Computer {unconstraineddelegation:true}) WHERE NOT c2.name IN domainControllers RETURN c2"
                }
            ]
        },			
		{
            "name": " Return the name of every computer in the database where at least one SPN for the computer contains the string 'MSSQL'",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (c:Computer) WHERE ANY (x IN c.serviceprincipalnames WHERE toUpper(x) CONTAINS 'MSSQL') RETURN c"
                }
            ]
        },				
		{
            "name": "View all GPOs",
            "queryList": [
                {
                    "final": true,
                    "query": "Match (n:GPO) RETURN n"
                }
            ]
        },		
		{
            "name": "View all groups that contain the word 'admin'",
            "queryList": [
                {
                    "final": true,
                    "query": "Match (n:Group) WHERE n.name CONTAINS 'ADMIN' RETURN n"
                }
            ]
        },	
		{
            "name": "Find users that can be AS-REP roasted",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (u:User {dontreqpreauth: true}) RETURN u"
                }
            ]
        },			
		{
            "name": "Find All Users with an SPN/Find all Kerberoastable Users with passwords last set > 5 years ago",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (u:User) WHERE n.hasspn=true AND WHERE u.pwdlastset < (datetime().epochseconds - (1825 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] RETURN u"
                }
            ]
        },				
		{
            "name": "Show all high value target's groups",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=(n:User)-[r:MemberOf*1..]->(m:Group {highvalue:true}) RETURN p"
                }
            ]
        },			
		{
            "name": "Find groups that contain both users and computers",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (c:Computer)-[r:MemberOf*1..]->(groupsWithComps:Group) WITH groupsWithComps MATCH (u:User)-[r:MemberOf*1..]->(groupsWithComps) RETURN DISTINCT(groupsWithComps) as groupsWithCompsAndUsers"
                }
            ]
        },			
		{
            "name": "Find Kerberoastable users who are members of high value groups",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (u:User)-[r:MemberOf*1..]->(g:Group) WHERE g.highvalue=true AND u.hasspn=true RETURN u"
                }
            ]
        },			
		{
            "name": "Find Kerberoastable users and where they are AdminTo",
            "queryList": [
                {
                    "final": true,
                    "query": "OPTIONAL MATCH (u1:User) WHERE u1.hasspn=true OPTIONAL MATCH (u1)-[r:AdminTo]->(c:Computer) RETURN u"
                }
            ]
        },			
		{
            "name": "Find computers with constrained delegation permissions and the corresponding targets where they allowed to delegate",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (c:Computer) WHERE c.allowedtodelegate IS NOT NULL RETURN c"
                }
            ]
        },		
		{
            "name": "Find if any domain user has interesting permissions against a GPO (Warning: Heavy)",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=(u:User)-[r:AllExtendedRights|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|GpLink*1..]->(g:GPO) RETURN p"
                }
            ]
        },
		{
            "name": "Find if unprivileged users have rights to add members into groups",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (n:User {admincount:False}) MATCH p=allShortestPaths((n)-[r:AddMember*1..]->(m:Group)) RETURN p"
                }
            ]
        },	
		{
            "name": "Find all users a part of the VPN group",
            "queryList": [
                {
                    "final": true,
                    "query": "Match p=(u:User)-[:MemberOf]->(g:Group) WHERE toUPPER (g.name) CONTAINS 'VPN' return p"
                }
            ]
        },
        {
            "name": "Find users that have never logged on and account is still active",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (n:User) WHERE n.lastlogontimestamp=-1.0 AND n.enabled=TRUE RETURN n "
                }
            ]
        },
        {
            "name": "Find an object in one domain that can do something to a foreign object",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=(n)-[r]->(m) WHERE NOT n.domain = m.domain RETURN p"
                }
            ]
        },
        {
            "name": "Find all sessions a user in a specific domain has",
			"requireNodeSelect": true,
            "queryList": [
                {
                    "final": false,
                    "title": "Select source domain...",
                    "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
                },		
                {
                    "final": true,                
                    "query": "MATCH p=(m:Computer)-[r:HasSession]->(n:User {domain:{result}}) RETURN p",					
					"startNode": "{}",
                    "allowCollapse": false
                }
            ]
        },	
        {
            "name": "Find an object from domain 'A' that can do anything to a foreign object",
			"requireNodeSelect": true,
            "queryList": [
                {
                    "final": false,
                    "title": "Select source domain...",
                    "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name"
                },		
                {
                    "final": true,                
                    "query": "MATCH p=(n {domain:{result}})-[r]->(d) WHERE NOT d.domain=n.domain RETURN p",					
					"startNode": "{}",
                    "allowCollapse": false
                }
            ]
        },
        {
            "name": "Find All edges any owned user has on a computer",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=shortestPath((m:User)-[r*]->(b:Computer)) WHERE m.owned RETURN p"
                }
            ]
        },
        {
            "name": "Return All Azure Users that are part of the 'Global Administrator' Role",
            "category": "Azure",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p =(n)-[r:AZGlobalAdmin*1..]->(m) RETURN p"
                }
            ]
        },
        {
            "name": "Return All On-Prem users with edges to Azure",
            "category": "Azure",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH  p=(m:User)-[r:AZResetPassword|AZOwns|AZUserAccessAdministrator|AZContributor|AZAddMembers|AZGlobalAdmin|AZVMContributor|AZOwnsAZAvereContributor]->(n) WHERE m.objectid CONTAINS 'S-1-5-21' RETURN p"
                }
            ]
        },
        {
            "name": "Find all paths to an Azure VM",
            "category": "Azure",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p = (n)-[r]->(g:AZVM) RETURN p"
                }
            ]
        },
        {
            "name": "Find all paths to an Azure KeyVault",
            "category": "Azure",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p = (n)-[r]->(g:AZKeyVault) RETURN p"
                }
            ]
        },
        {
            "name": "Return All Azure Users and their Groups",
            "category": "Azure",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=(m:AZUser)-[r:MemberOf]->(n) WHERE NOT m.objectid CONTAINS 'S-1-5' RETURN p"
                }
            ]
        },
        {
            "name": "Return All Azure AD Groups that are synchronized with On-Premise AD",
            "category": "Azure",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH (n:Group) WHERE n.objectid CONTAINS 'S-1-5' AND n.azsyncid IS NOT NULL RETURN n"
                }
            ]
        },
        {
            "name": "Find all Privileged Service Principals",
            "category": "Azure",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p = (g:AZServicePrincipal)-[r]->(n) RETURN p"
                }
            ]
        },
        {
            "name": "Find all Owners of Azure Applications",
            "category": "Azure",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p = (n)-[r:AZOwns]->(g:AZApp) RETURN p"
                }
            ]
        },
        {
			"name": "Find users that can RDP into something",
			"category": "PlainText Password Queries",
			"queryList": [
				{
					"final": true,
					"query": "match (u1:User) WHERE u1.plaintext=True MATCH p1=(u1)-[:CanRDP*1..]->(c:Computer) RETURN u1",
					"allowCollapse": true
				}
			]
		},
		{
			"name": "Find users that belong to high value groups",
			"category": "PlainText Password Queries",
			"queryList": [
				{
					"final": true,
					"query": "match (u1:User) WHERE u1.plaintext=True MATCH p=(u1:User)-[r:MemberOf*1..]->(m:Group {highvalue:true}) RETURN u1",
					"allowCollapse": true
				}
			]
		},
		{
			"name": "Find kerberoastable users",
			"category": "PlainText Password Queries",
			"queryList": [
				{
					"final": true,
					"query": "match (u1:User) WHERE u1.plaintext=True AND u1.hasspn=True RETURN u1",
					"allowCollapse": true
				}
			]
		},
		{
			"name": "Return users with seasons in their password and are high value targets",
			"category": "PlainText Password Queries",
			"queryList": [
				{
					"final": true,
					"query": "MATCH (u1:User) WHERE u1.plaintextpassword =~ \"([Ww]inter.*|[sS]pring.*|[sS]ummer.*|[fF]all.*)\" MATCH p=(u1:User)-[r:MemberOf*1..]->(m:Group {highvalue:true}) RETURN u1",
					"allowCollapse": true
				}
			]
		},
		{
			"name": "Return users with seasons in their password and have local admin on at least one computer",
			"category": "PlainText Password Queries",
			"queryList": [
				{
					"final": true,
					"query": "match (u1:User) WHERE u1.plaintextpassword =~ \"([Ww]inter.*|[sS]pring.*|[sS]ummer.*|[fF]all.*)\" match p=(u1:User)-[r:AdminTo]->(n:Computer) RETURN p",
					"allowCollapse": true
				}
			]
		},
		{
			"name": "Return users with seasons in their password and a path to high value targets (limit to 25 results)",
			"category": "PlainText Password Queries",
			"queryList": [
				{
					"final": true,
					"query": "match (u1:User) WHERE u1.plaintextpassword =~ \"([Ww]inter.*|[sS]pring.*|[sS]ummer.*|[fF]all.*)\" MATCH p=shortestPath((u1:User)-[*1..]->(n {highvalue:true})) WHERE  u1<>n return u1 LIMIT 25",
					"allowCollapse": true
				}
			]
		},
		{
			"name": "Return users with a variant of \"password\" in their password and are high value targets",
			"category": "PlainText Password Queries",
			"queryList": [
				{
					"final": true,
					"query": "MATCH (u1:User) WHERE u1.plaintextpassword =~ \"(.*[pP][aA@][sS$][sS$][wW][oO0][rR][dD].*)\" MATCH p=(u1:User)-[r:MemberOf*1..]->(m:Group {highvalue:true}) RETURN u1",
					"allowCollapse": true
				}
			]
		},
		{
			"name": "Return users with a variant of \"password\" in their password and have local admin on at least one computer",
			"category": "PlainText Password Queries",
			"queryList": [
				{
					"final": true,
					"query": "match (u1:User) WHERE u1.plaintextpassword =~ \"(.*[pP][aA@][sS$][sS$][wW][oO0][rR][dD].*)\" match p=(u1:User)-[r:AdminTo]->(n:Computer) RETURN p",
					"allowCollapse": true
				}
			]
		},
		{
			"name": "Return users with a variant of \"password\" in their password and a path to high value targets (limit to 25 results)",
			"category": "PlainText Password Queries",
			"queryList": [
				{
					"final": true,
					"query": "match (u1:User) WHERE u1.plaintextpassword =~ \"(.*[pP][aA@][sS$][sS$][wW][oO0][rR][dD].*)\"  MATCH p=shortestPath((u1:User)-[*1..]->(n {highvalue:true})) WHERE  u1<>n return u1 LIMIT 25",
					"allowCollapse": true
				}
			]
		},
        {
            "name": "Find all Certificate Templates",
            "category": "Certipy - Certificates",
            "queryList": [
              {
                "final": true,
                "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' RETURN n"
              }
            ]
          },
          {
            "name": "Find enabled Certificate Templates",
            "category": "Certipy - Certificates",
            "queryList": [
              {
                "final": true,
                "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.Enabled = true RETURN n"
              }
            ]
          },
          {
            "name": "Find Certificate Authorities",
            "category": "Certipy - Certificates",
            "queryList": [
              {
                "final": true,
                "query": "MATCH (n:GPO) WHERE n.type = 'Enrollment Service' RETURN n"
              }
            ]
          },
          {
            "name": "Show Enrollment Rights for Certificate Template",
            "category": "Certipy - Certificates",
            "queryList": [
              {
                "final": false,
                "title": "Select a Certificate Template...",
                "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' RETURN n.name"
              },
              {
                "final": true,
                "query": "MATCH p=(g)-[:Enroll|AutoEnroll]->(n:GPO {name:$result}) WHERE n.type = 'Certificate Template' return p",
                "allowCollapse": false
              }
            ]
          },
          {
            "name": "Show Rights for Certificate Authority",
            "category": "Certipy - Certificates",
            "queryList": [
              {
                "final": false,
                "title": "Select a Certificate Authority...",
                "query": "MATCH (n:GPO) WHERE n.type = 'Enrollment Service' RETURN n.name"
              },
              {
                "final": true,
                "query": "MATCH p=(g)-[:ManageCa|ManageCertificates|Auditor|Operator|Read|Enroll]->(n:GPO {name:$result}) return p",
                "allowCollapse": false
              }
            ]
          },
          {
            "name": "Find Misconfigured Certificate Templates (ESC1)",
            "category": "Certipy - Domain Escalation",
            "queryList": [
              {
                "final": true,
                "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.`Enrollee Supplies Subject` = true and n.`Client Authentication` = true and n.`Enabled` = true  RETURN n"
              }
            ]
          },
          {
            "name": "Shortest Paths to Misconfigured Certificate Templates from Owned Principals (ESC1)",
            "category": "Certipy - Domain Escalation",
            "queryList": [
              {
                "final": true,
                "query": "MATCH p=allShortestPaths((g {owned:true})-[*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Certificate Template' and n.`Enrollee Supplies Subject` = true and n.`Client Authentication` = true and n.`Enabled` = true return p"
              }
            ]
          },
          {
            "name": "Find Misconfigured Certificate Templates (ESC2)",
            "category": "Certipy - Domain Escalation",
            "queryList": [
              {
                "final": true,
                "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.`Enabled` = true and (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage`)  RETURN n"
              }
            ]
          },
          {
            "name": "Shortest Paths to Misconfigured Certificate Templates from Owned Principals (ESC2)",
            "category": "Certipy - Domain Escalation",
            "queryList": [
              {
                "final": true,
                "query": "MATCH p=allShortestPaths((g {owned:true})-[*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Certificate Template' and n.`Enabled` = true and (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage`) return p"
              }
            ]
          },
          {
            "name": "Find Enrollment Agent Templates (ESC3)",
            "category": "Certipy - Domain Escalation",
            "queryList": [
              {
                "final": true,
                "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.`Enabled` = true and (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage` or 'Certificate Request Agent' IN n.`Extended Key Usage`)  RETURN n"
              }
            ]
          },
          {
            "name": "Shortest Paths to Enrollment Agent Templates from Owned Principals (ESC3)",
            "category": "Certipy - Domain Escalation",
            "queryList": [
              {
                "final": true,
                "query": "MATCH p=allShortestPaths((g {owned:true})-[*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Certificate Template' and n.`Enabled` = true and (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage` or 'Certificate Request Agent' IN n.`Extended Key Usage`) return p"
              }
            ]
          },
          {
            "name": "Shortest Paths to Vulnerable Certificate Template Access Control (ESC4)",
            "category": "Certipy - Domain Escalation",
            "queryList": [
              {
                "final": true,
                "query": "MATCH p=shortestPath((g)-[:GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Certificate Template' and n.`Enabled` = true RETURN p"
              }
            ]
          },
          {
            "name": "Shortest Paths to Vulnerable Certificate Template Access Control from Owned Principals (ESC4)",
            "category": "Certipy - Domain Escalation",
            "queryList": [
              {
                "final": true,
                "query": "MATCH p=allShortestPaths((g {owned:true})-[r*1..]->(n:GPO)) WHERE g<>n and n.type = 'Certificate Template' and n.Enabled = true and NONE(x in relationships(p) WHERE type(x) = 'Enroll' or type(x) = 'AutoEnroll') return p"
              }
            ]
          },
          {
            "name": "Find Certificate Authorities with User Specified SAN (ESC6)",
            "category": "Certipy - Domain Escalation",
            "queryList": [
              {
                "final": true,
                "query": "MATCH (n:GPO) WHERE n.type = 'Enrollment Service' and n.`User Specified SAN` = 'Enabled' RETURN n"
              }
            ]
          },
          {
            "name": "Shortest Paths to Vulnerable Certificate Authority Access Control (ESC7)",
            "category": "Certipy - Domain Escalation",
            "queryList": [
              {
                "final": true,
                "query": "MATCH p=shortestPath((g)-[r:GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|ManageCa|ManageCertificates*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Enrollment Service' RETURN p"
              }
            ]
          },
          {
            "name": "Shortest Paths to Vulnerable Certificate Authority Access Control from Owned Principals (ESC7)",
            "category": "Certipy - Domain Escalation",
            "queryList": [
              {
                "final": true,
                "query": "MATCH p=allShortestPaths((g {owned:true})-[*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Enrollment Service' and NONE(x in relationships(p) WHERE type(x) = 'Enroll' or type(x) = 'AutoEnroll') RETURN p"
              }
            ]
          },
          {
            "name": "Find Certificate Authorities with HTTP Web Enrollment (ESC8)",
            "category": "Certipy - Domain Escalation",
            "queryList": [
              {
                "final": true,
                "query": "MATCH (n:GPO) WHERE n.type = 'Enrollment Service' and n.`Web Enrollment` = 'Enabled' RETURN n"
              }
            ]
          },
          {
            "name": "Find Unsecured Certificate Templates (ESC9)",
            "category": "Certipy - Domain Escalation",
            "queryList": [
              {
                "final": true,
                "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.`Enrollee Supplies Subject` = true and n.`Client Authentication` = true and n.`Enabled` = true  RETURN n"
              }
            ]
          },
          {
            "name": "Find Unsecured Certificate Templates (ESC9)",
            "category": "Certipy - PKI",
            "queryList": [
              {
                "final": true,
                "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and 'NoSecurityExtension' in n.`Enrollment Flag` and n.`Enabled` = true  RETURN n"
              }
            ]
          },
          {
            "name": "Shortest Paths to Unsecured Certificate Templates from Owned Principals (ESC9)",
            "category": "Certipy - PKI",
            "queryList": [
              {
                "final": true,
                "query": "MATCH p=allShortestPaths((g {owned:true})-[r*1..]->(n:GPO)) WHERE n.type = 'Certificate Template' and g<>n and 'NoSecurityExtension' in n.`Enrollment Flag` and n.`Enabled` = true and NONE(rel in r WHERE type(rel) in ['EnabledBy','Read','ManageCa','ManageCertificates']) return p"
              }
            ]
          },
        
        {
			"name": "Return all owned users that have admin rights to hosts",
			"category": "Outbound Object Control",
			"queryList": [
				{
					"final": true,
					"query": "match p = (g:User (owned: True))-(r)->(n) where r.isacl=true return p"
				}
			]
		},
        {
			"name": "Return all groups with owned users that have admin rights to hosts",
			"category": "Outbound Object Control",
			"queryList": [
				{
					"final": true,
					"query": "match p = (g1:User (owned: True))-(r1:MemberOf*1..)->(g2:Group)-(r2)->(n) where r2.isacl=true return p"
                }
			]
		},
        
        {
			"name": "Computer with LAPS enabled",
			"category": "LAPS",
			"queryList": [
				{
					"final": true,
					"query": "MATCH (c:Computer {haslaps: true}) RETURN c"
                }
			]
		},
        {
			"name": "Groups that can read LAPS passwords",
			"category": "LAPS",
			"queryList": [
				{
					"final": true,
					"query": "MATCH p=(g:Group)-[:ReadLAPSPassword]->(c:Computer) RETURN p"
                }
			]
		},
        {
			"name": "High value computer that has LAPS non-enabled (Share pwd with other other computer?)",
			"category": "LAPS",
			"queryList": [
				{
					"final": true,
					"query": "match (c:Computer (haslaps:False) where c.highvalue=True return c"
                }
			]
		},
        {
			"name": "Owned accounts paths to computer nodes with LAPS non-enabled",
			"category": "LAPS",
			"queryList": [
				{
					"final": true,
					"query": "match p=shortestpath((u (owned:true))-(:MemberOf|AdminTo|Owns|AllExtendedRights|GenericALl|GenericWrite|ReadLAPSPassword|AddKeyCredentialLink*1..]->(c.Computer (haslaps:false))) return p"
                }
			]
		},
        {
			"name": "All accounts that are MSSQL admins",
			"category": "MSSQL",
			"queryList": [
				{
					"final": true,
					"query": "MATCH p=(u:User)-[r:SQLAdmin]->(c:Computer) return p"
                }
			]
		},
        {
			"name": "Owned accounts that are MSSQL admins",
			"category": "MSSQL",
			"queryList": [
				{
					"final": true,
					"query": "MATCH p=(u:User {owned: True})-[r:SQLAdmin]->(c:Computer) return p"
                }
			]
		},
        {
			"name": "Accounts where passwords don't expire",
			"category": "Password Review",
			"queryList": [
				{
					"final": true,
					"query": "MATCH (n:User) WHERE n.pwdneverexpires RETURN n"
                }
			]
		},
        {
			"name": "Accounts where passwords don't expire",
			"category": "Password Review",
			"queryList": [
				{
					"final": true,
					"query": "MATCH (n:User) WHERE n.pwdneverexpires RETURN n"
                }
			]
		},
        {
			"name": "Accounts where passwords havne't been changed in over 90 days",
			"category": "Password Review",
			"queryList": [
				{
					"final": true,
					"query": "MATCH (n:User) WHERE n.pwdLastSet < (timestamp() - 90*24*60*60*1000) RETURN n"
                }
			]
		},
        {
			"name": "Accounts where passwords havne't been changed in over 180 days",
			"category": "Password Review",
			"queryList": [
				{
					"final": true,
					"query": "MATCH (n:User) WHERE n.pwdLastSet < (timestamp() - 180*24*60*60*1000) RETURN n"
                }
			]
		},
	    	{
            "name": "Find all accounts that share passwords",
            "category": "Password Sharing",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=(u:User)-[r:SharesPasswordWith]->(n) return p"
                }
            ]
        },
        {
            "name": "Find all owned accounts that share passwords",
            "category": "Password Sharing",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=(u:User)-[r:SharesPasswordWith]->(n) where u.owned = true return p"
                }
            ]
        },
        {
            "name": "Find kerberoastable accounts that share passwords",
            "category": "Password Sharing",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=(u1:User)-[r:SharesPasswordWith]->(u2) where u1.hasspn = true return p"
                }
            ]
        },
        {
            "name": "Shortest Paths to high value targets through password sharing",
            "category": "Password Sharing",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=shortestPath((n)-[:MemberOf|SharesPasswordWith*1..]->(m {highvalue:true})) WHERE NOT n=m RETURN p",
                    "allowCollapse": true,
                    "endNode": "{}"
                }
            ]
        },
        {
            "name": "Paths to Domain Admin through password sharing",
            "category": "Password Sharing",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=shortestPath((n)-[:MemberOf|SharesPasswordWith*1..]->(m:Group)) WHERE m.objectid =~ \"(?i)S-1-5-.*-512\" AND NOT n=m RETURN p",
                    "allowCollapse": true,
                    "endNode": "{}"
                }
            ]
        },
        {
            "name": "All paths to Domain Admin (including password reuse)",
            "category": "Password Sharing",
            "queryList": [
                {
                    "final": true,
                    "query": "MATCH p=(n:Group)<-[*1..]-(m) WHERE n.objectid =~ \"(?i)S-1-5-.*-512\" RETURN p",
                    "allowCollapse": true,
                    "endNode": "{}"
                }
            ]
        },
	{
		"name": "Accounts where passwords havne't been changed in over 365 days",
		"category": "Password Review",
		"queryList": [
			{
				"final": true,
				"query": "MATCH (n:User) WHERE n.pwdLastSet < (timestamp() - 365*24*60*60*1000) RETURN n"
	}
		]
	},
        
        {
			"name": "Accounts that have never logged in",
			"category": "In testing (could be wrong)",
			"queryList": [
				{
					"final": true,
					"query": "MATCH (u:User) WHERE u.enabled=TRUE AND u.lastlogon=-1.0 RETURN u"
                }
			]
		},
        {
			"name": "Accounts that have never logged in that don't have a SPN",
			"category": "In testing (could be wrong)",
			"queryList": [
				{
					"final": true,
					"query": "MATCH (n:User) WHERE NOT EXISTS(n.lastLogon) AND NOT EXISTS(n.servicePrincipalName) RETURN n"
                }
			]
		},
        {
			"name": "Service accounts that have admin rights? (prob wrong)",
			"category": "In testing (could be wrong)",
			"queryList": [
				{
					"final": true,
					"query": "MATCH (u:User)-[:AdminTo]->(h:Host) WHERE EXISTS(u.servicePrincipalName) RETURN u"
                }
			]
		}
	]
}
