{
  "queries": [
    {
      "name": "List all owned users (limit 50)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (m:User) WHERE m.owned=TRUE RETURN m LIMIT 50"
        }
      ]
    },
    {
      "name": "List all owned computers",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (m:Computer) WHERE m.owned=TRUE RETURN m"
        }
      ]
    },
    {
      "name": "List all owned groups",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (m:Group) WHERE m.owned=TRUE RETURN m"
        }
      ]
    },
    {
      "name": "List all High Valued Targets",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (m) WHERE m.highvalue=TRUE RETURN m"
        }
      ]
    },
    {
      "name": "List the groups of all owned users",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (m:User) WHERE m.owned=TRUE WITH m MATCH p=(m)-[:MemberOf*1..]->(n:Group) RETURN p"
        }
      ]
    },
    {
      "name": "Find the Shortest path to a high value target from an owned object",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=shortestPath((g {owned:true})-[*1..]->(n {highvalue:true})) WHERE  g<>n return p"
        }
      ]
    },
    {
      "name": "Find the Shortest path to a unconstrained delegation system from an owned object",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n) MATCH p=shortestPath((n)-[*1..]->(m:Computer {unconstraineddelegation: true})) WHERE NOT n=m AND n.owned = true RETURN p"
        }
      ]
    },
    {
      "name": "Find all Kerberoastable Users",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:User)WHERE n.hasspn=true RETURN n",
          "allowCollapse": false
        }
      ]
    },
    {
      "name": "Find All Users with an SPN/Find all Kerberoastable Users with passwords last set less than 5 years ago",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User) WHERE u.hasspn=true AND u.pwdlastset < (datetime().epochseconds - (1825 * 86400)) AND NOT u.pwdlastset IN [-1.0, 0.0] RETURN u.name, u.pwdlastset order by u.pwdlastset "
        }
      ]
    },
    {
      "name": "Find Kerberoastable Users with a path to DA",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User {hasspn:true}) MATCH (g:Group) WHERE g.objectid ENDS WITH '-512' MATCH p = shortestPath( (u)-[*1..]->(g) ) RETURN p"
        }
      ]
    },
    {
      "name": "Find machines Domain Users can RDP into",
      "queryList": [
        {
          "final": true,
          "query": "match p=(g:Group)-[:CanRDP]->(c:Computer) where g.objectid ENDS WITH '-513' return p"
        }
      ]
    },
    {
      "name": "Find what groups can RDP",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(m:Group)-[r:CanRDP]->(n:Computer) RETURN p"
        }
      ]
    },
    {
      "name": "Find groups that can reset passwords (Warning: Heavy)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(m:Group)-[r:ForceChangePassword]->(n:User) RETURN p"
        }
      ]
    },
    {
      "name": "Find groups that have local admin rights (Warning: Heavy)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(m:Group)-[r:AdminTo]->(n:Computer) RETURN p"
        }
      ]
    },
    {
      "name": "Find all users that have local admin rights",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(m:User)-[r:AdminTo]->(n:Computer) RETURN p"
        }
      ]
    },
    {
      "name": "Find all active Domain Admin sessions",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:User)-[:MemberOf]->(g:Group) WHERE g.objectid ENDS WITH '-512' MATCH p = (c:Computer)-[:HasSession]->(n) return p"
        }
      ]
    },
    {
      "name": "Find all computers with Unconstrained Delegation",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (c:Computer {unconstraineddelegation:true}) return c"
        }
      ]
    },
    {
      "name": "Find all computers with unsupported operating systems",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '.*(2000|2003|2008|xp|vista|7|me).*' RETURN H"
        }
      ]
    },
    {
      "name": "Find users that logged in within the last 90 days",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User) WHERE u.lastlogon < (datetime().epochseconds - (90 * 86400)) and NOT u.lastlogon IN [-1.0, 0.0] RETURN u"
        }
      ]
    },
    {
      "name": "Find users with passwords last set within the last 90 days",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User) WHERE u.pwdlastset < (datetime().epochseconds - (90 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] RETURN u"
        }
      ]
    },
    {
      "name": "Find constrained delegation",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(u:User)-[:AllowedToDelegate]->(c:Computer) RETURN p"
        }
      ]
    },
    {
      "name": "Find computers that allow unconstrained delegation that AREN'T domain controllers.",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (c1:Computer)-[:MemberOf*1..]->(g:Group) WHERE g.objectid ENDS WITH '-516' WITH COLLECT(c1.name) AS domainControllers MATCH (c2:Computer {unconstraineddelegation:true}) WHERE NOT c2.name IN domainControllers RETURN c2"
        }
      ]
    },
    {
      "name": " Return the name of every computer in the database where at least one SPN for the computer contains the string 'MSSQL'",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (c:Computer) WHERE ANY (x IN c.serviceprincipalnames WHERE toUpper(x) CONTAINS 'MSSQL') RETURN c"
        }
      ]
    },
    {
      "name": "View all GPOs",
      "queryList": [
        {
          "final": true,
          "query": "Match (n:GPO) RETURN n"
        }
      ]
    },
    {
      "name": "View all groups that contain the word 'admin'",
      "queryList": [
        {
          "final": true,
          "query": "Match (n:Group) WHERE n.name CONTAINS 'ADMIN' RETURN n"
        }
      ]
    },
    {
      "name": "Find users that can be AS-REP roasted",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User {dontreqpreauth: true}) RETURN u"
        }
      ]
    },
    {
      "name": "Find All Users with an SPN/Find all Kerberoastable Users with passwords last set > 5 years ago",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User) WHERE u.hasspn=true AND WHERE u.pwdlastset < (datetime().epochseconds - (1825 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] RETURN u"
        }
      ]
    },
    {
      "name": "Show all high value target's groups",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(n:User)-[r:MemberOf*1..]->(m:Group {highvalue:true}) RETURN p"
        }
      ]
    },
    {
      "name": "Find groups that contain both users and computers",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (c:Computer)-[r:MemberOf*1..]->(groupsWithComps:Group) WITH groupsWithComps MATCH (u:User)-[r:MemberOf*1..]->(groupsWithComps) RETURN DISTINCT(groupsWithComps) as groupsWithCompsAndUsers"
        }
      ]
    },
    {
      "name": "Find Kerberoastable users who are members of high value groups",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User)-[r:MemberOf*1..]->(g:Group) WHERE g.highvalue=true AND u.hasspn=true RETURN u"
        }
      ]
    },
    {
      "name": "Find Kerberoastable users and where they are AdminTo",
      "queryList": [
        {
          "final": true,
          "query": "OPTIONAL MATCH (u1:User) WHERE u1.hasspn=true OPTIONAL MATCH (u1)-[r:AdminTo]->(c:Computer) RETURN u1"
        }
      ]
    },
    {
      "name": "Find computers with constrained delegation permissions and the corresponding targets where they allowed to delegate",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (c:Computer) WHERE c.allowedtodelegate IS NOT NULL RETURN c"
        }
      ]
    },
    {
      "name": "Find if any domain user has interesting permissions against a GPO (Warning: Heavy)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(u:User)-[r:AllExtendedRights|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|GpLink*1..]->(g:GPO) RETURN p"
        }
      ]
    },
    {
      "name": "Find if unprivileged users have rights to add members into groups",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:User {admincount:False}) MATCH p=allShortestPaths((n)-[r:AddMember*1..]->(m:Group)) RETURN p"
        }
      ]
    },
    {
      "name": "Find all users a part of the VPN group",
      "queryList": [
        {
          "final": true,
          "query": "Match p=(u:User)-[:MemberOf]->(g:Group) WHERE toUPPER (g.name) CONTAINS 'VPN' return p"
        }
      ]
    },
    {
      "name": "Find users that have never logged on and account is still active",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:User) WHERE n.lastlogontimestamp=-1.0 AND n.enabled=TRUE RETURN n "
        }
      ]
    },
    {
      "name": "Find an object in one domain that can do something to a foreign object",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(n)-[r]->(m) WHERE NOT n.domain = m.domain RETURN p"
        }
      ]
    },
    {
      "name": "Find All edges any owned user has on a computer",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=shortestPath((m:User)-[r*]->(b:Computer)) WHERE m.owned RETURN p"
        }
      ]
    },
    {
      "name": "Return All Azure Users that are part of the 'Global Administrator' Role",
      "category": "Azure",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p =(n)-[r:AZGlobalAdmin*1..]->(m) RETURN p"
        }
      ]
    },
    {
      "name": "Return All On-Prem users with edges to Azure",
      "category": "Azure",
      "queryList": [
        {
          "final": true,
          "query": "MATCH  p=(m:User)-[r:AZResetPassword|AZOwns|AZUserAccessAdministrator|AZContributor|AZAddMembers|AZGlobalAdmin|AZVMContributor|AZOwnsAZAvereContributor]->(n) WHERE m.objectid CONTAINS 'S-1-5-21' RETURN p"
        }
      ]
    },
    {
      "name": "Find all paths to an Azure VM",
      "category": "Azure",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (n)-[r]->(g:AZVM) RETURN p"
        }
      ]
    },
    {
      "name": "Find all paths to an Azure KeyVault",
      "category": "Azure",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (n)-[r]->(g:AZKeyVault) RETURN p"
        }
      ]
    },
    {
      "name": "Return All Azure Users and their Groups",
      "category": "Azure",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(m:AZUser)-[r:MemberOf]->(n) WHERE NOT m.objectid CONTAINS 'S-1-5' RETURN p"
        }
      ]
    },
    {
      "name": "Return All Azure AD Groups that are synchronized with On-Premise AD",
      "category": "Azure",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:Group) WHERE n.objectid CONTAINS 'S-1-5' AND n.azsyncid IS NOT NULL RETURN n"
        }
      ]
    },
    {
      "name": "Find all Privileged Service Principals",
      "category": "Azure",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (g:AZServicePrincipal)-[r]->(n) RETURN p"
        }
      ]
    },
    {
      "name": "Find all Owners of Azure Applications",
      "category": "Azure",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (n)-[r:AZOwns]->(g:AZApp) RETURN p"
        }
      ]
    },
    {
      "name": "Find users that can RDP into something",
      "category": "PlainText Password Queries",
      "queryList": [
        {
          "final": true,
          "query": "match (u1:User) WHERE u1.plaintext=True MATCH p1=(u1)-[:CanRDP*1..]->(c:Computer) RETURN u1",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find users that belong to high value groups",
      "category": "PlainText Password Queries",
      "queryList": [
        {
          "final": true,
          "query": "match (u1:User) WHERE u1.plaintext=True MATCH p=(u1:User)-[r:MemberOf*1..]->(m:Group {highvalue:true}) RETURN u1",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Find kerberoastable users",
      "category": "PlainText Password Queries",
      "queryList": [
        {
          "final": true,
          "query": "match (u1:User) WHERE u1.plaintext=True AND u1.hasspn=True RETURN u1",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Return users with seasons in their password and are high value targets",
      "category": "PlainText Password Queries",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u1:User) WHERE u1.plaintextpassword =~ \"([Ww]inter.*|[sS]pring.*|[sS]ummer.*|[fF]all.*)\" MATCH p=(u1:User)-[r:MemberOf*1..]->(m:Group {highvalue:true}) RETURN u1",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Return users with seasons in their password and have local admin on at least one computer",
      "category": "PlainText Password Queries",
      "queryList": [
        {
          "final": true,
          "query": "match (u1:User) WHERE u1.plaintextpassword =~ \"([Ww]inter.*|[sS]pring.*|[sS]ummer.*|[fF]all.*)\" match p=(u1:User)-[r:AdminTo]->(n:Computer) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Return users with seasons in their password and a path to high value targets (limit to 25 results)",
      "category": "PlainText Password Queries",
      "queryList": [
        {
          "final": true,
          "query": "match (u1:User) WHERE u1.plaintextpassword =~ \"([Ww]inter.*|[sS]pring.*|[sS]ummer.*|[fF]all.*)\" MATCH p=shortestPath((u1:User)-[*1..]->(n {highvalue:true})) WHERE  u1<>n return u1 LIMIT 25",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Return users with a variant of \"password\" in their password and are high value targets",
      "category": "PlainText Password Queries",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u1:User) WHERE u1.plaintextpassword =~ \"(.*[pP][aA@][sS$][sS$][wW][oO0][rR][dD].*)\" MATCH p=(u1:User)-[r:MemberOf*1..]->(m:Group {highvalue:true}) RETURN u1",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Return users with a variant of \"password\" in their password and have local admin on at least one computer",
      "category": "PlainText Password Queries",
      "queryList": [
        {
          "final": true,
          "query": "match (u1:User) WHERE u1.plaintextpassword =~ \"(.*[pP][aA@][sS$][sS$][wW][oO0][rR][dD].*)\" match p=(u1:User)-[r:AdminTo]->(n:Computer) RETURN p",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Return users with a variant of \"password\" in their password and a path to high value targets (limit to 25 results)",
      "category": "PlainText Password Queries",
      "queryList": [
        {
          "final": true,
          "query": "match (u1:User) WHERE u1.plaintextpassword =~ \"(.*[pP][aA@][sS$][sS$][wW][oO0][rR][dD].*)\"  MATCH p=shortestPath((u1:User)-[*1..]->(n {highvalue:true})) WHERE  u1<>n return u1 LIMIT 25",
          "allowCollapse": true
        }
      ]
    },
    {
      "name": "Return all owned users that have admin rights to hosts",
      "category": "Outbound Object Control",
      "queryList": [
        {
          "final": true,
          "query": "match p = (g:User {owned: True})-(r)->(n) where r.isacl=true return p"
        }
      ]
    },
    {
      "name": "Return all groups with owned users that have admin rights to hosts",
      "category": "Outbound Object Control",
      "queryList": [
        {
          "final": true,
          "query": "match p = (g1:User {owned: True})-(r1:MemberOf*1..)->(g2:Group)-(r2)->(n) where r2.isacl=true return p"
        }
      ]
    },
    {
      "name": "Computer with LAPS enabled",
      "category": "LAPS",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (c:Computer {haslaps: true, enabled:true}) RETURN c"
        }
      ]
    },
    {
      "name": "Non High Value Computer without LAPS enabled",
      "category": "LAPS",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (c:Computer {haslaps: false, enabled:true, highvalue:false}) RETURN c"
        }
      ]
    },
    {
      "name": "Groups that can read LAPS passwords",
      "category": "LAPS",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(g:Group)-[:ReadLAPSPassword]->(c:Computer) RETURN p"
        }
      ]
    },
    {
      "name": "Owned users that can read LAPS passwords",
      "category": "LAPS",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(g:User{enabled:true})-[:MemberOf|ReadLAPSPassword]->(c:Computer) RETURN p"
        }
      ]
    },
    {
      "name": "High value computer that has LAPS non-enabled (Share pwd with other other computer?)",
      "category": "LAPS",
      "queryList": [
        {
          "final": true,
          "query": "match (c:Computer {haslaps:False}) where c.highvalue=True return c"
        }
      ]
    },
    {
      "name": "Owned accounts paths to computer nodes with LAPS non-enabled",
      "category": "LAPS",
      "queryList": [
        {
          "final": true,
          "query": "match p=shortestpath((u {owned:true}-(:MemberOf|AdminTo|Owns|AllExtendedRights|GenericAll|GenericWrite|ReadLAPSPassword|AddKeyCredentialLink*1..]->(c.Computer {haslaps:false})) return p"
        }
      ]
    },
    {
      "name": "All accounts that are MSSQL admins",
      "category": "MSSQL",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(u:User)-[r:SQLAdmin]->(c:Computer) return p"
        }
      ]
    },
    {
      "name": "Owned accounts that are MSSQL admins",
      "category": "MSSQL",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(u:User {owned: True})-[r:SQLAdmin]->(c:Computer) return p"
        }
      ]
    },
    {
      "name": "Accounts where passwords don't expire",
      "category": "Password Review",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:User) WHERE n.pwdneverexpires RETURN n"
        }
      ]
    },
    {
      "name": "Accounts where passwords havne't been changed in over 90 days",
      "category": "Password Review",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:User) WHERE n.pwdLastSet < (timestamp() - 90*24*60*60*1000) RETURN n"
        }
      ]
    },
    {
      "name": "Accounts where passwords havne't been changed in over 180 days",
      "category": "Password Review",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:User) WHERE n.pwdLastSet < (timestamp() - 180*24*60*60*1000) RETURN n"
        }
      ]
    },
    {
      "name": "Owned accounts where passwords havne't been changed in over a year but do expire",
      "category": "Password Review",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:User {pwdneverexpires:false}) WHERE n.pwdLastSet < (timestamp() - 365*24*60*60*1000) RETURN n"
        }
      ]
    },
    {
      "name": "Find all accounts that share passwords",
      "category": "Password Sharing",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(u:User)-[r:SharesPassword]->(n) return p"
        }
      ]
    },
    {
      "name": "Find all accounts (enabled) that share passwords",
      "category": "Password Sharing",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(u:User{enabled:true})-[r:SharesPassword]->(n{enabled:true}) return p"
        }
      ]
    },
    {
      "name": "Find all owned accounts that share passwords",
      "category": "Password Sharing",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(u:User{enabled:true})-[r:SharesPassword]->(n) where u.owned = true return p"
        }
      ]
    },
    {
      "name": "Find kerberoastable accounts that share passwords",
      "category": "Password Sharing",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(u1:User)-[r:SharesPassword]->(u2) where u1.hasspn = true return p"
        }
      ]
    },
    {
      "name": "Shortest Paths to high value targets through password sharing",
      "category": "Password Sharing",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=shortestPath((n)-[:MemberOf|SharesPassword*1..]->(m {highvalue:true})) WHERE NOT n=m RETURN p",
          "allowCollapse": true,
          "endNode": "{}"
        }
      ]
    },
    {
      "name": "Paths to Domain Admin through password sharing",
      "category": "Password Sharing",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=shortestPath((n)-[:MemberOf|SharesPassword*1..]->(m:Group)) WHERE m.objectid =~ \"(?i)S-1-5-.*-512\" AND NOT n=m RETURN p",
          "allowCollapse": true,
          "endNode": "{}"
        }
      ]
    },
    {
      "name": "All paths to Domain Admin (including password reuse)",
      "category": "Password Sharing",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(n:Group)<-[*1..]-(m) WHERE n.objectid =~ \"(?i)S-1-5-.*-512\" RETURN p",
          "allowCollapse": true,
          "endNode": "{}"
        }
      ]
    },
    {
      "name": "Accounts where passwords havne't been changed in over 365 days",
      "category": "Password Review",
      "queryList": [
        {
          "final": true,
          "query": " MATCH (u) WHERE (u:User OR u:AZUser) WHERE u.pwdLastSet < (timestamp() - 365*24*60*60*1000) RETURN u"
        }
      ]
    },
    {
      "name": "Better Search - User Descriptions (default: password)",
      "category": "Better Search",
      "queryList": [
        {
          "final": true,
          "query": "match (u:User) where u.description contains \"password\" return u"
        }
      ]
    },
    {
      "name": "Better Search - User First/Last Name (default: zach)",
      "category": "Better Search",
      "queryList": [
        {
          "final": true,
          "query": "with \"zach\" as name match (u:User) WHERE toLower(u.displayname) CONTAINS name OR toLower(u.distinguisedname) CONTAINS name RETURN u"
        }
      ]
    },
    {
      "name": "Better Search - User - Username/Description/Title (default: scada)",
      "category": "Better Search",
      "queryList": [
        {
          "final": true,
          "query": "with \"scada\" as search match (u:User) WHERE toLower(u.displayname) CONTAINS search OR toLower(u.distinguisedname) CONTAINS search OR toLower(u.title) CONTAINS search OR toLower(u.description) CONTAINS search RETURN u"
        }
      ]
    },
    {
      "name": "Better Search - User Email (default: @gmail.com)",
      "category": "Better Search",
      "queryList": [
        {
          "final": true,
          "query": "match (u:User) where u.email contains \"@gmail.com\" return u"
        }
      ]
    },
    {
      "name": "Find all Certificate Templates",
      "category": "Certipy - Certificates",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' RETURN n"
        }
      ]
    },
    {
      "name": "Find enabled Certificate Templates",
      "category": "Certipy - Certificates",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.Enabled = true RETURN n"
        }
      ]
    },
    {
      "name": "Find Certificate Authorities",
      "category": "Certipy - Certificates",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:GPO) WHERE n.type = 'Enrollment Service' RETURN n"
        }
      ]
    },
    {
      "name": "Accounts that have never logged in",
      "category": "Interesting Users",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User) WHERE u.enabled=TRUE AND u.lastlogon=-1.0 RETURN u"
        }
      ]
    },
    {
      "name": "Accounts that have never logged in that don't have a SPN",
      "category": "In testing (could be wrong)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:User) WHERE NOT EXISTS(n.lastLogon) AND NOT EXISTS(n.servicePrincipalName) RETURN n"
        }
      ]
    },
    {
      "name": "Service accounts that have admin rights? (prob wrong)",
      "category": "In testing (could be wrong)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User)-[:AdminTo]->(h:Host) WHERE EXISTS(u.servicePrincipalName) RETURN u"
        }
      ]
    },
    {
      "name": "Users with possible passwords in description",
      "category": "In testing (could be wrong)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User) WHERE u.description =~ \"(?i).*welcome.*|.*winter.*|.*spring.*|.*summer.*|.*fall.*|.*password.*|.*pwd.*|.*pass.*|.*[pP][aA@][sS$][sS$][wW][oO0][rR][dD].*\" RETURN u"
        }
      ]
    },
    {
      "name": "Owned user path to possible admin related group (admin in group name or desc)",
      "category": "In testing (could be wrong)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p = (m:User {owned:true})-[r:MemberOf*1..]->(n:Group)  WHERE toLower(n.description) CONTAINS \"admin\" OR toLower(n.samaccountname) CONTAINS \"admin\"  RETURN p"
        }
      ]
    },
    {
      "name": "Users with home directory set",
      "category": "In testing (could be wrong)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(u:User {owned:true}) where u.homedirectory is not null return u"
        }
      ]
    },
    {
      "name": "Owned user that has local admin to any computer",
      "category": "In testing (could be wrong)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(m:User {owned:True})-[r1:MemberOf|AdminTo*1..]->(n:Computer) RETURN p"
        }
      ]
    },
    {
      "name": "Owned object that has local admin to any computer",
      "category": "In testing (could be wrong)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(m {owned:True})-[r1:MemberOf|GenericAll|AdminTo|GenericWrite*1..]->(n:Computer) RETURN p"
        }
      ]
    },
    {
      "name": "Owned object that has local admin to any computer",
      "category": "In testing (could be wrong)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(m {owned:True})-[r1:MemberOf|AdminTo*1..]->(n:Computer) RETURN p"
        }
      ]
    },
    {
      "name": "Computer account is admin to other computer (forced auth :))",
      "category": "In testing (could be wrong)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(m:Computer)-[r1:MemberOf|AdminTo*1..]->(n:Computer) RETURN p"
        }
      ]
    },
    {
      "name": "Find SQLAdmins (limit 50)",
      "category": "In testing (could be wrong)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(u:User)-[r:MemberOf|SQLAdmin]->(c:Computer) return p LIMIT 50"
        }
      ]
    },
    {
      "name": "SQLAdmins that have DA session on host",
      "category": "In testing (could be wrong)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(u:User)-[r:MemberOf|SQLAdmin]->(c:Computer)-[n:HasSession]->(u2:User)-[r2:MemberOf*1..]->(g:Group) WHERE  g.objectid ENDS WITH '-512' return p"
        }
      ]
    },
    {
      "name": "Owned SQLAdmins that have DA session on host",
      "category": "In testing (could be wrong)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(u:User {owned: True})-[r:MemberOf|SQLAdmin]->(c:Computer)-[n:HasSession]->(u2:User)-[r2:MemberOf*1..]->(g:Group) WHERE  g.objectid ENDS WITH '-512' return p"
        }
      ]
    },
    {
      "name": "IT related employees (network, admin, system, security, cyber)",
      "category": "In testing (could be wrong)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User) WHERE toLower(u.title) =~ \".*(network|admin|system|security|cyber)\\b.*\" OR toLower(u.description) =~ \".*(network|admin|system|security|cyber).*\" RETURN u"
        }
      ]
    },
    {
      "name": "Service accounts related to SQL",
      "category": "In testing (could be wrong)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:User) WHERE n.hasspn = true   AND ANY(spn IN n.serviceprincipalnames WHERE toLower(spn) CONTAINS \"mssql\" OR toLower(spn) CONTAINS \"1433\") RETURN n"
        }
      ]
    },
    {
      "name": "Service accounts related to web service",
      "category": "In testing (could be wrong)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:User) WHERE n.hasspn = true   AND ANY(spn IN n.serviceprincipalnames WHERE toLower(spn) CONTAINS \"http\" OR spn CONTAINS \"80\" OR spn CONTAINS \"443\") RETURN n"
        }
      ]
    },
    {
      "name": "Service accounts not related to web or sql",
      "category": "In testing (could be wrong)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:User) WHERE n.hasspn = true   AND NOT ANY(spn IN n.serviceprincipalnames WHERE toLower(spn) CONTAINS \"mssql\" OR toLower(spn) CONTAINS \"1433\") RETURN n"
        }
      ]
    },
    {
      "name": "Accounts or Groups related to high value targets",
      "category": "In testing (could be wrong)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n) WHERE (n:User OR n:Group) AND toLower(n.name) =~ \".*(esxi|vmware|manage engine|solarwinds|proxmox|crowdstrike|secureworks|huntress|defender|cybereason|sophos|symantec|sentinelone|cortex|xdr|prtg|git).*\" OR toLower(n.description) =~ \".*(esxi|vmware|manage engine|solarwinds|proxmox|crowdstrike|secureworks|huntress|defender|cybereason|sophos|symantec|sentinelone|cortex|xdr|prtg|manageengine|git).*\" RETURN n"        
        }
      ]
    },
    {
      "name": "Identify Provider Kerberos Service Accounts (Okta, PingOne, AzureAD)",
      "category": "In testing (could be wrong)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (n:User) WHERE n.hasspn = true AND ANY(spn IN n.serviceprincipalnames WHERE toLower(spn) =~ \".*(kerberos\\.okta\\.com|kerberos\\.pingone|autologin\\.microsoftazuread-sso\\.com).*\") RETURN n"
        } 
      ]
    },
    {
      "name": "President/CEO related employees",
      "category": "Job Positions",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User) WHERE toLower(u.title) =~ \".*(president|ceo|chief executive|chief exec|founder|managing director|chairman).*\" OR toLower(u.description) =~ \".*(president|ceo|chief executive|chief exec|founder|managing director|chairman).*\" RETURN u"
        }
      ]
    },
    {
      "name": "Accounting related employees",
      "category": "Job Positions",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User) WHERE toLower(u.title) =~ \".*(accounting|accountant|finance|financial|controller|auditor|bookkeeper|bookkeeping|cpa).*\" OR toLower(u.description) =~ \".*(accounting|accountant|finance|financial|controller|auditor|bookkeeper|bookkeeping|cpa).*\" RETURN u"
        }
      ]
    },
    {
      "name": "HR related employees",
      "category": "Job Positions",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User) WHERE toLower(u.title) =~ \".*(hr|human resources|recruitment|recruiter|talent|people operations|employee relations).*\" OR toLower(u.description) =~ \".*(hr|human resources|recruitment|recruiter|talent|people operations|employee relations).*\" RETURN u"
        }
      ]
    },
    {
      "name": "Dev related employees",
      "category": "Job Positions",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User) WHERE toLower(u.title) =~ \".*(dev|developer|software|engineer|programmer|programming|coder|development).*\" OR toLower(u.description) =~ \".*(dev|developer|software|engineer|programmer|programming|coder|development).*\" RETURN u"
        }
      ]
    },
    {
      "name": "C Suite employees",
      "category": "Job Positions",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User) WHERE toLower(u.title) =~ \".*(c-suite|chief|cfo|cto|cio|coo|cmo|chro|executive).*\" OR toLower(u.description) =~ \".*(c-suite|chief|cfo|cto|cio|coo|cmo|chro|executive).*\" RETURN u"    
        }
      ]
    },
    {
      "name": "Board of Directors",
      "category": "Job Positions",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User) WHERE toLower(u.title) =~ \".*(board|director|board member|trustee|advisory board|board of directors).*\" OR toLower(u.description) =~ \".*(board|director|board member|trustee|advisory board|board of directors).*\" RETURN u"
        }
      ]
    },
    {
      "name": "Legal / Compliance",
      "category": "Job Positions",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User) WHERE toLower(u.title) =~ \".*(legal|attorney|counsel|lawyer|compliance|regulatory).*\" OR toLower(u.description) =~ \".*(legal|attorney|counsel|lawyer|compliance|regulatory).*\" RETURN u"
        }
      ]
    },
    {
      "name": "Marketing / Communications",
      "category": "Job Positions",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User) WHERE toLower(u.title) =~ \".*(marketing|communications|comm|public relations|pr|branding).*\" OR toLower(u.description) =~ \".*(marketing|communications|comm|public relations|pr|branding).*\" RETURN u"
        }
      ]
    },
    {
      "name": "Sales / Business Development",
      "category": "Job Positions",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User) WHERE toLower(u.title) =~ \".*(sales|account manager|business development|bd|sales executive|sales rep).*\" OR toLower(u.description) =~ \".*(sales|account manager|business development|bd|sales executive|sales rep).*\" RETURN u"
        }
      ]
    },
    {
      "name": "Facilities / Operations Management",
      "category": "Job Positions",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User) WHERE toLower(u.title) =~ \".*(facilities|office manager|operations|logistics|facility management).*\" OR toLower(u.description) =~ \".*(facilities|office manager|operations|logistics|facility management).*\" RETURN u"
        }
      ]
    },
    {
      "name": "Technical Support / Helpdesk",
      "category": "Job Positions",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User) WHERE toLower(u.title) =~ \".*(helpdesk|support|technical support|it support|service desk).*\" OR toLower(u.description) =~ \".*(helpdesk|support|technical support|it support|service desk).*\" RETURN u"
        }
      ]
    },
    {
      "name": "Non-High Value Users with Local Admin Rights (AdminTo)",
      "category": "In testing (could be wrong)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User)-[:MemberOf*1..]->(g:Group) WHERE g.highvalue = true WITH COLLECT(u.samaccountname) AS highValueUsers MATCH (u:User) WHERE NOT u.samaccountname IN highValueUsers OPTIONAL MATCH p1 = (u)-[:AdminTo]->(c:Computer) OPTIONAL MATCH p2 = (u)-[:MemberOf*1..]->(g:Group)-[:AdminTo]->(c2:Computer) RETURN DISTINCT p1,p2"
        }
      ]
    },
    {
      "name": "Non-High Value Users with Privileged Rights (AdminTo, GenericWrite, ChangePassword, GenericAll, Owns, WriteDacl, WriteOwner, GpLink)",
      "category": "In testing (could be wrong)",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User)-[:MemberOf*1..]->(g:Group) WHERE g.highvalue = true WITH COLLECT(u.samaccountname) AS highValueUsers MATCH (u:User) WHERE NOT u.samaccountname IN highValueUsers OPTIONAL MATCH p1 = (u)-[:AdminTo|GenericWrite|ChangePassword|GenericAll|Owns|WriteDacl|WriteOwner|GpLink]->(c) OPTIONAL MATCH p2 = (u)-[:MemberOf*1..]->(g:Group)-[:AdminTo|GenericWrite|ChangePassword|GenericAll|Owns|WriteDacl|WriteOwner|GpLink]->(c2) RETURN DISTINCT p1,p2"
        }
      ]
    },
    {
      "name": "All owned users and their direct relationships",
      "category": "Owned Users",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(u:User {owned:true})-[r]->(n) RETURN p"
        }
      ]
    },
    {
      "name": "Local admin rights through direct AdminTo",
      "category": "Owned Users",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(u:User {owned:true})-[r:AdminTo]->(c:Computer) RETURN p"
        }
      ]
    },
    {
      "name": "Local admin rights through group membership",
      "category": "Owned Users",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(u:User {owned:true})-[r:MemberOf*1..]->(g:Group)-[r2:AdminTo]->(c:Computer) RETURN p"
        }
      ]
    },
    {
      "name": "Control over other domain accounts",
      "category": "Owned Users",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(u:User {owned:true})-[r:GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|ForceChangePassword]->(u2:User) RETURN p"
        }
      ]
    },
    {
      "name": "Control over groups",
      "category": "Owned Users",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(u:User {owned:true})-[r:GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|AddMember]->(g:Group) RETURN p"
        }
      ]
    },
    {
      "name": "Control over computers",
      "category": "Owned Users",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(u:User {owned:true})-[r:GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner]->(c:Computer) RETURN p"
        }
      ]
    },
    {
      "name": "Paths to high value targets",
      "category": "Owned Users",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=shortestPath((u:User {owned:true})-[*1..]->(n {highvalue:true})) WHERE u<>n RETURN p"
        }
      ]
    },
    {
      "name": "Paths to Domain Admins",
      "category": "Owned Users",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=shortestPath((u:User {owned:true})-[*1..]->(g:Group)) WHERE g.objectid ENDS WITH '-512' RETURN p"
        }
      ]
    },
    {
      "name": "Service accounts with admin rights",
      "category": "Owned Users",
      "queryList": [
        {
          "final": true,
          "query": "MATCH (u:User {owned:true}) WHERE EXISTS(u.servicePrincipalName) MATCH p=(u)-[r:AdminTo|GenericAll|GenericWrite|Owns]->(n) RETURN p"
        }
      ]
    },
    {
      "name": "Accounts with password sharing",
      "category": "Owned Users",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(u:User {owned:true})-[r:SharesPassword]->(n) RETURN p"
        }
      ]
    },
    {
      "name": "Accounts with LAPS access",
      "category": "Owned Users",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(u:User {owned:true})-[r:ReadLAPSPassword]->(c:Computer) RETURN p"
        }
      ]
    },
    {
      "name": "Accounts with SQL admin rights",
      "category": "Owned Users",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(u:User {owned:true})-[r:SQLAdmin]->(c:Computer) RETURN p"
        }
      ]
    },
    {
      "name": "Accounts with RDP access",
      "category": "Owned Users",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(u:User {owned:true})-[r:CanRDP]->(c:Computer) RETURN p"
        }
      ]
    },
    {
      "name": "Accounts with GPO control",
      "category": "Owned Users",
      "queryList": [
        {
          "final": true,
          "query": "MATCH p=(u:User {owned:true})-[r:GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|GpLink]->(g:GPO) RETURN p"
        }
      ]
    }
  ]
}
